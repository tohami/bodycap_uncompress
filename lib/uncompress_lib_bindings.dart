// Copyright (c) 2009-2017 Dave Gamble and cJSON contributors
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Holds bindings to cJSON.
class UncompressBinding {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  UncompressBinding(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int uncompress_data(
      ffi.Pointer<ffi.Uint8> buffer,
      int size,
      ffi.Pointer<record_t> records,
      ) {
    return (_uncompress_data ??=
        _dylib.lookupFunction<_c_uncompress_data, _dart_uncompress_data>(
            'uncompress_data'))(
      buffer,
      size,
      records,
    );
  }

  _dart_uncompress_data? _uncompress_data;

  // uint8_t lib_uncompress_data(uint8_t *buffer, uint8_t len, samples_t *p_samples);

  int lib_uncompress_data(
      ffi.Pointer<ffi.Uint8> buffer,
      int len,
      ffi.Pointer<samples_t> p_samples,
      ) {
    return (_lib_uncompress_data ??= _dylib.lookupFunction<
        _c_lib_uncompress_data,
        _dart_lib_uncompress_data>('lib_uncompress_data'))(
      buffer,
      len,
      p_samples,
    );
  }

  _dart_lib_uncompress_data? _lib_uncompress_data;

  void __va_start(
      ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
      ) {
    return (___va_start ??=
        _dylib.lookupFunction<_c___va_start, _dart___va_start>('__va_start'))(
      arg0,
    );
  }

  _dart___va_start? ___va_start;

  void __security_init_cookie() {
    return (___security_init_cookie ??= _dylib.lookupFunction<
        _c___security_init_cookie,
        _dart___security_init_cookie>('__security_init_cookie'))();
  }

  _dart___security_init_cookie? ___security_init_cookie;

  void __security_check_cookie(
      int _StackCookie,
      ) {
    return (___security_check_cookie ??= _dylib.lookupFunction<
        _c___security_check_cookie,
        _dart___security_check_cookie>('__security_check_cookie'))(
      _StackCookie,
    );
  }

  _dart___security_check_cookie? ___security_check_cookie;

  void __report_gsfailure(
      int _StackCookie,
      ) {
    return (___report_gsfailure ??=
        _dylib.lookupFunction<_c___report_gsfailure, _dart___report_gsfailure>(
            '__report_gsfailure'))(
      _StackCookie,
    );
  }

  _dart___report_gsfailure? ___report_gsfailure;

  void lib_bitStream_create(
      ffi.Pointer<def_bitStream_t> bs,
      ffi.Pointer<ffi.Uint8> dataBuffer,
      int sizeBytes,
      int setStartBit,
      ) {
    return (_lib_bitStream_create ??= _dylib.lookupFunction<
        _c_lib_bitStream_create,
        _dart_lib_bitStream_create>('lib_bitStream_create'))(
      bs,
      dataBuffer,
      sizeBytes,
      setStartBit,
    );
  }

  _dart_lib_bitStream_create? _lib_bitStream_create;

  int lib_bitStream_set_bits(
      ffi.Pointer<def_bitStream_t> bs,
      int value,
      int nbBits,
      ) {
    return (_lib_bitStream_set_bits ??= _dylib.lookupFunction<
        _c_lib_bitStream_set_bits,
        _dart_lib_bitStream_set_bits>('lib_bitStream_set_bits'))(
      bs,
      value,
      nbBits,
    );
  }

  _dart_lib_bitStream_set_bits? _lib_bitStream_set_bits;

  void lib_bitStream_validate(
      ffi.Pointer<def_bitStream_t> bs,
      int nbSamplesAdded,
      ) {
    return (_lib_bitStream_validate ??= _dylib.lookupFunction<
        _c_lib_bitStream_validate,
        _dart_lib_bitStream_validate>('lib_bitStream_validate'))(
      bs,
      nbSamplesAdded,
    );
  }

  _dart_lib_bitStream_validate? _lib_bitStream_validate;

  void lib_bitStream_completeLastByte(
      ffi.Pointer<def_bitStream_t> bs,
      ) {
    return (_lib_bitStream_completeLastByte ??= _dylib.lookupFunction<
        _c_lib_bitStream_completeLastByte,
        _dart_lib_bitStream_completeLastByte>(
        'lib_bitStream_completeLastByte'))(
      bs,
    );
  }

  _dart_lib_bitStream_completeLastByte? _lib_bitStream_completeLastByte;

  int lib_bitStream_get_len(
      ffi.Pointer<def_bitStream_t> bs,
      ) {
    return (_lib_bitStream_get_len ??= _dylib.lookupFunction<
        _c_lib_bitStream_get_len,
        _dart_lib_bitStream_get_len>('lib_bitStream_get_len'))(
      bs,
    );
  }

  _dart_lib_bitStream_get_len? _lib_bitStream_get_len;

  void lib_bitStream_define(
      ffi.Pointer<def_bitStream_t> bs,
      ffi.Pointer<ffi.Uint8> dataBuffer,
      int sizeBytes,
      ) {
    return (_lib_bitStream_define ??= _dylib.lookupFunction<
        _c_lib_bitStream_define,
        _dart_lib_bitStream_define>('lib_bitStream_define'))(
      bs,
      dataBuffer,
      sizeBytes,
    );
  }

  _dart_lib_bitStream_define? _lib_bitStream_define;

  int lib_bitStream_get_bits(
      ffi.Pointer<def_bitStream_t> bs,
      int nb,
      ffi.Pointer<ffi.Uint32> output,
      ) {
    return (_lib_bitStream_get_bits ??= _dylib.lookupFunction<
        _c_lib_bitStream_get_bits,
        _dart_lib_bitStream_get_bits>('lib_bitStream_get_bits'))(
      bs,
      nb,
      output,
    );
  }

  _dart_lib_bitStream_get_bits? _lib_bitStream_get_bits;
}

class record_t extends ffi.Struct {
  @ffi.Uint32()
  external int time;

  @ffi.Int16()
  external int tempe;
}

class samples_t extends ffi.Struct {
  @ffi.Uint32()
  external int nbSamples;

  @ffi.Array.multi([50000])
  external ffi.Array<record_t> samples;
}

class def_bitStream_t extends ffi.Struct {
  @ffi.Uint16()
  external int currentIdx;

  @ffi.Uint16()
  external int confirmedIdx;

  @ffi.Uint16()
  external int dataSize;

  @ffi.Uint16()
  external int nbSamples;

  external ffi.Pointer<ffi.Uint8> data;
}

const int C9_NB_CODE = 22;

const int C9_DIRECT_PREFIX_VALUE = 127;

const int C9_DIRECT_PREFIX_NB_BITS = 7;

const int C9_DIRECT_MIN = 0;

const int C9_DIRECT_MAX = 8191;

const int C9_DIFF_MIN = -10;

const int C9_DIFF_MAX = 11;

const int C9_DIRECT_NB_BITS = 13;

const int C9_INVALID_TEMPERATURE = 8191;

const int CT_DIFF_MIN = -129;

const int CT_DIFF_MAX = 129;

const int CT_NB_CODE = 259;

const int CT_DIFF_MINUS_ONE_VALUE = 8;

const int CT_DIFF_MINUS_ONE_NB_BITS = 4;

const int CT_DIFF_UNCHANGED_VALUE = 0;

const int CT_DIFF_UNCHANGED_NB_BITS = 1;

const int CT_DIFF_PLUS_ONE_VALUE = 9;

const int CT_DIFF_PLUS_ONE_NB_BITS = 4;

const int CT_UNRECEIVED_PREFIX_VALUE = 12;

const int CT_UNRECEIVED_PREFIX_NB_BITS = 4;

const int CT_UNRECEIVED_COUNTER_NB_BITS = 6;

const int CT_UNRECEIVED_COUNTER_MAX = 63;

const int CT_DIRECT_PREFIX_VALUE = 10;

const int CT_DIRECT_PREFIX_NB_BITS = 4;

const int CT_DIRECT_NB_BITS = 32;

const int CT_INVALID_VALUE = 11;

const int CT_INVALID_NB_BITS = 4;

const int CT_NEW_PERIOD_PREFIX_VALUE = 13;

const int CT_NEW_PERIOD_PREFIX_NB_BITS = 4;

const int CT_NEW_PERIOD_NB_BITS = 16;

const int CT_RESERVED_VALUE = 14;

const int CT_RESERVED_NB_BITS = 4;

const int INVALID_TEMPERATURE = 32767;

const int SRV_UNCOMPRESS_NB_MAX_SAMPLES = 200000;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

typedef _c_uncompress_data = ffi.Int32 Function(
    ffi.Pointer<ffi.Uint8> buffer,
    ffi.Int32 size,
    ffi.Pointer<record_t> records,
    );

typedef _dart_uncompress_data = int Function(
    ffi.Pointer<ffi.Uint8> buffer,
    int size,
    ffi.Pointer<record_t> records,
    );

typedef _c_lib_uncompress_data = ffi.Int32 Function(
    ffi.Pointer<ffi.Uint8> buffer,
    ffi.Int32 len,
    ffi.Pointer<samples_t> p_samples,
    );

typedef _dart_lib_uncompress_data = int Function(
    ffi.Pointer<ffi.Uint8> buffer,
    int len,
    ffi.Pointer<samples_t> p_samples,
    );

typedef _c___va_start = ffi.Void Function(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    );

typedef _dart___va_start = void Function(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    );

typedef _c___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef _c___security_check_cookie = ffi.Void Function(
    ffi.Uint64 _StackCookie,
    );

typedef _dart___security_check_cookie = void Function(
    int _StackCookie,
    );

typedef _c___report_gsfailure = ffi.Void Function(
    ffi.Uint64 _StackCookie,
    );

typedef _dart___report_gsfailure = void Function(
    int _StackCookie,
    );

typedef _c_lib_bitStream_create = ffi.Void Function(
    ffi.Pointer<def_bitStream_t> bs,
    ffi.Pointer<ffi.Uint8> dataBuffer,
    ffi.Uint16 sizeBytes,
    ffi.Uint8 setStartBit,
    );

typedef _dart_lib_bitStream_create = void Function(
    ffi.Pointer<def_bitStream_t> bs,
    ffi.Pointer<ffi.Uint8> dataBuffer,
    int sizeBytes,
    int setStartBit,
    );

typedef _c_lib_bitStream_set_bits = ffi.Uint8 Function(
    ffi.Pointer<def_bitStream_t> bs,
    ffi.Uint32 value,
    ffi.Uint8 nbBits,
    );

typedef _dart_lib_bitStream_set_bits = int Function(
    ffi.Pointer<def_bitStream_t> bs,
    int value,
    int nbBits,
    );

typedef _c_lib_bitStream_validate = ffi.Void Function(
    ffi.Pointer<def_bitStream_t> bs,
    ffi.Uint32 nbSamplesAdded,
    );

typedef _dart_lib_bitStream_validate = void Function(
    ffi.Pointer<def_bitStream_t> bs,
    int nbSamplesAdded,
    );

typedef _c_lib_bitStream_completeLastByte = ffi.Void Function(
    ffi.Pointer<def_bitStream_t> bs,
    );

typedef _dart_lib_bitStream_completeLastByte = void Function(
    ffi.Pointer<def_bitStream_t> bs,
    );

typedef _c_lib_bitStream_get_len = ffi.Uint16 Function(
    ffi.Pointer<def_bitStream_t> bs,
    );

typedef _dart_lib_bitStream_get_len = int Function(
    ffi.Pointer<def_bitStream_t> bs,
    );

typedef _c_lib_bitStream_define = ffi.Void Function(
    ffi.Pointer<def_bitStream_t> bs,
    ffi.Pointer<ffi.Uint8> dataBuffer,
    ffi.Uint16 sizeBytes,
    );

typedef _dart_lib_bitStream_define = void Function(
    ffi.Pointer<def_bitStream_t> bs,
    ffi.Pointer<ffi.Uint8> dataBuffer,
    int sizeBytes,
    );

typedef _c_lib_bitStream_get_bits = ffi.Uint8 Function(
    ffi.Pointer<def_bitStream_t> bs,
    ffi.Uint8 nb,
    ffi.Pointer<ffi.Uint32> output,
    );

typedef _dart_lib_bitStream_get_bits = int Function(
    ffi.Pointer<def_bitStream_t> bs,
    int nb,
    ffi.Pointer<ffi.Uint32> output,
    );
